user  nginx;
worker_processes  2;
 
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;
 
events {
 # as mentioned on line 2 there will be 2 worker process
 # so in total 2*1024 = 2048 connections can be handled at a time
 worker_connections  1024;
}
 
http {
 client_max_body_size 100M;
 # it includes support for all generic mime types.
 include       /etc/nginx/mime.types;
 # It mentioned default mime type
 default_type  application/octet-stream;
 
 log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
 '$status $body_bytes_sent "$http_referer" '
 '"$http_user_agent" "$http_x_forwarded_for"';
 
 access_log  /var/log/nginx/access.log  main;
 sendfile  on;
 
 upstream django_docker {
   # "django" is the web project as docker service.
   server blackrock_gunicorn:8000;
 }

  # always redirect to https
  server {
      listen 80 default_server;
      server_name www.blackrokinvest.in blackrokinvest.in;
      return 301 https://$host$request_uri;
  }
  server {
      listen 443 ssl http2;
      server_name www.blackrokinvest.in blackrokinvest.in; 


      ssl_certificate     /etc/letsencrypt/csr/0000_csr-certbot.pem;
      ssl_certificate_key /etc/letsencrypt/keys/0000_key-certbot.pem;

    location /static/ {
        alias /app/staticfiles/;
    }

    location / {

      # checks for static file, if not found proxy to app
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_pass http://django_docker;
      # django_docker is upstream object as mentioned on line 23,
      # basically it is pointing to django docker service as mentioned in docker-compose.yml
    }
  }
}
